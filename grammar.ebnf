# this is the grammar for the assembly language

@@grammar :: MagicAssembly

@@whitespace :: /[ \t]+/

start = code $ ;

# code is a list of objects
code::Code = /\s*/ objects:{object}* $ ;

# an object is a label definition or an instruction or a comment to be ignored
# followed by any whitespace
object = object:( instruction | variable_definition | label_definition | comment ) /\s*/ ;

# a comment starts with a semicolon and ends with a newline
comment::Comment = ";" /.*/ "\n" ;

# a value is either a number or a string
value = number | string ;

# a number is either a byte or a word
number = label | word | byte ;

# a byte is a numeral optionally followed by a byte indication
byte::Byte = numeral:numeral "%8" ;

# a word is a numeral optionally followed by a word indication
word::Word = numeral:numeral [ "%16" ] ;

# a word value is either a word or a label
word_value = word | label ;

# a numeral is a series of digits optionally followed by a base indicator
numeral::Numeral = digits:(/[0-9a-fA-F]+/) base:[/[bodh]/];

# a string is a series of characters enclosed in quotations
string::String = '"' string:(/(?<=\')(.*?)(?=\')|(?<=\")(.*?)(?=\")+/) '"' ; # make better l8r

# a label is an alphanumeric string
label::Label = string:(/[a-zA-Z\_][a-zA-Z0-9\_]*/) ;

# a label definition is a label followed by a colon
label_definition::LabelDefinition = label:label ":" ;

# a variable definitenio is a label followed by an equals sign followed by a value
variable_definition::VariableDefinition = label:label "=" value:word;

# an instruction is a mnemonic optionally followed by some arguments followed by a newline or a comment
instruction::Instruction = mnemonic:mnemonic arguments:","%{argument}* ("\n" | comment) ;

# a mnemonic is an alphabetic string
mnemonic = /[a-zA-Z_]+/ ;

# an argument is either an immediate , a direct value , or an indirect value
argument = immediate | direct | indirect ;

# an immediate is a value
immediate::Immediate = value:value ;

# a direct is an optional interface indicator followed by "@" followed by an address followed by a type
direct::Direct = "@" interface:interface address:(numeral | label) type:type ;

# indirect is an optional interface indicator followed by "@@" followed by an address followed by a type
indirect::Indirect = "@@" interface:interface address:(numeral | label) type:type ;

# an interface is either program , player , or omni
# ugh how to debug this and make it work
interface = player | omni | program;
program::Program = "p" ;
player::Player = [ "r" ] ;
omni::Omni = "o" ;

# a type is a byte type, word type, or string type
type::Type = type:( string_type | word_type | byte_type) ;
byte_type::ByteType = ["%8"] ;
word_type::WordType = "%16" ;
string_type::StringType = "%s" ;
